#summary Changes, In Progress, Issues, To Do.
#labels Featured

= Introduction =

This page contains a change log, working notes on issues, items to-do, and items currently in progress.

= Changes =

== In Progress ==

  * World editor is well underway. It uses PGU's GUI, which does what I need and was easy enough to figure out how to integrate with my app in just one sitting. Done: map scroller, menus, toolbar, shape editor, importer/exporter, scrolling tile palette with tile picking; tiles joined with geometry for manipulation in the map; auto-saving/loading of tilesheet sizer inputs.

Controls:
  * Menus do what you'd expect.
  * Scrollbars do what you'd expect.
  * Toolbar selects a shape to insert into the map.
  * Right-click in the map:
    * Inserts a shape into the map. If tiles are attached to the mouse, they are attached to the shape when it is inserted.
  * Left-click in the map:
    * Clicking inside a shape selects that shape for further manipulation.
    * Clicking outside a shape deselects the selected shape.
    * Clicking inside stacked shapes selects the next shape.
    * Clicking and dragging the center control point moves the shape.
    * Clicking and dragging a corner control point reshapes a shape.
  * Left-click in the tile palette:
    * Clicking on an unselected tile selects that tile. All other tiles are deselected.
    * Clicking on a selected tile deselects all tiles.
  * Right-click in the tile palette:
    * Adds or removes a tile from multiple selection.
  * Keys:
    * Delete: deletes a shape and its attached tiles from the map.
    * Escape: exits program. (Convenient for testing. This behavior will be removed later.)

== Issues ==

== To Do ==

== Changes in 0.0.1 ==

SVN rev 58:
  * New: function collapse_map_level().
  * Fixed: tile combining for sparse map levels in function collapse_map_level(). Color key was not preserved in some cases.
  * Changed: Camera.interpolate now returns the interpolation value.
  * Changed: toolkit.load_tiled_maps() renamed to load_tiled_tmx_maps().
  * Changed: MapLayer now stores per-layer attributes, tile_size and map_size so that individual layers can be collapsed.
  * Changed: Camera.visible_tile_range now returns a list of (x1,y1,x2,y2) tuples, one for each layer.
  * Changed: Camera.visible_tiles now returns a list of MapLayer objects, one for each layer.
  * Changed: toolkit functions modified to use the Map, MapLayer, and Camera changes: make_tiles(), make_tiles2(), load_tiled_tmx_maps(), collapse_map_level(), draw_tiles(), draw_labels(), and draw_grid().
  * Changed: toolkit functions draw_labels(), and draw_grid() now have a default argument layer=0.
  * Changed: `__init__.py` now imports Map and MapLayer before Camera.

SVN rev 60:
  * Changed: __init__.py, Map and MapLayer imported before Camera.
  * Changed: camera.py, roles of update() and interpolate() changed.
  * Changed: camera.py, interpolate() simplified.
  * Changed: screen.py, Screen class split off into a Surface class for subsurfaces.
  * Changed: examples tweaked for compatibility.

== Changes in 0.0.2 ==

SVN rev 64:
  * New: sprite.py with BucketSprite and BucketGroup.
  * Changed: __init__.py imports classes from sprite.py.

SVN rev 71:
  * Fixed: "TypeError: integer argument expected, got float" when passing a float tuple to pygame.draw.circle() in examples 6 through 9. Apparently at some point in the near future this will raise an exception rather than give a warning.

SVN rev 75:
  * Changed: BucketGroup constructor now takes tile_size and map_size arguments instead of a map.

== Changes in 0.0.3 ==

SVN rev 77:
  * New: CameraTargetSprite class, a sprite that moves around the map but remains stationary on the screen. (Typical of action-RPG scrollers.)
  * Changed: Examples 6-9 updated to use the CameraTargetSprite class.
  * Changed: Examples 6-9, extraneous "switch view" code removed so the examples are less cluttered with off-topic crap.
  * Changed: grides and grid label sprites moved from Map to MapLevel class. MapLevel.__init__ now takes default args (make_grid=False, make_labels=False).
  * Changed: toolkit.py; map, label, and grid functions tweaked to use the new MapLevel class correctly.

== Changes in 0.0.4 ==

SVN rev 91:
  * Changed: dim is now an optional argument for BucketGroup.draw(), update(), buckets_in_range(). If omitted it defaults to all sprites. sprites_in_range() was not changed in this manner; it would much more efficient to call group.sprites().
  * Changed: BucketGroup.update() modified to copy sprites out of the buckets before looping through them. This was required because looping through the buckets caused a sprite to be updated twice if its update() method caused it to move to a bucket pending update.
  * New: Camera.`_`interp exposed as read-only property interp.
  * New: toolkit.interpolated_step() calculates the position between poles, given the current position, the step, and the clock interpolation value.
  * New: Added BucketGroup.copy().
  * New: examples/10_minimap.py.
  * New: examples/11_multiple_maps_and_cameras.py.
  * Changed: Numerous docstring updates.

== Changes in 0.0.5 ==

SVN rev 99:
  * Changed: model.Object implemented as a pygame Sprite-alike. Replaces model.Avatar.
  * Changed: model.World implemented as a pygame AbstractGroup-alike.
  * Changed: Engine modified to use model module changes.
  * Changed: examples/11_multiple_maps_and_cameras.py modified to use model module changes.

SVN rev 108:
  * New: quad_tree.py, optional quad tree implementation for model.QuadTreeWorld.
  * Changed: `__init__.py` imports new items from engine.
  * Changed: engine.py has new world_type module data, supports new constructor arguments, and is aware of new QuadTreeWorld.
  * Changed: examples updated to work with library changes.
  * New: examples 12_quad_tree_stress_test.py and 13_simple_world.py.

== Changes in 0.0.6 ==

SVN rev 115:
  * New: many collision routines added to geometry.py.
  * New: 14_collision_sandbox.py unit test.

SVN rev 118:
  * Fixes: containment tests in geometry.py.
  * Fixes: tweaks in examples/14_collision_sandbox.py.

SVN rev 120:
  * New: QuadTree can now do collision test combinations: rect-vs-rect, shape-vs-shape, or rect first followed by shape. This takes advantage of the new callbacks in the geometry module.
  * Changed: Engine accepts arguments for QuadTree constructor.
  * New: examples/15_quad_tree_geometry_test.py demos shape-vs-shape collisions.
  * Fixed: examples/12_quad_tree_stress_test.py, Thing.update() code rearranged to correct mistakes in coloring and alpha per game tick.

SVN rev 122:
  * Fixed: `quadtree_*` kwargs mistake in Engine constructor.
  * Fixed: small but critical mistakes in geometry.rect_collided_other, in the rect case.
  * Fixed: forgotten rect_pre_tested=True in QuadTree.`_`collided_full.
  * Fixed: collision detection scope anomally involving objects placed in catch-all branches.
  * Fixed: examples/12_quad_tree_stress_test.py and 15_quad_tree_geometry_test.py timing issue in make_hud() which resulted in intermittent "Statf.image not found".
  * New: code in Stat.update() and Statf.update() to gracefully handle callbacks returning None value.

SVN rev 126:
  * Change: Camera.screen_position property obsolesced. Renamed to screen_center. This is overdue. The name makes more sense for its intended usage.
  * New: Camera.abs_screen_center property added.
Changed: some examples modified for compatibility with camera changes.
  * Fixed: some examples were broken by geometry.line_intersects_line() change. These are fixed.
  * Fixed: speed box calculations were broken in 09_collapse_map.py. These are now working.

SVN rev 131:
  * New: classes RectGeometry, CircleGeometry, PolyGeometry added to geometry module.
  * Changed: examples/15_quad_tree_geometry_test.py updated to use new geometry module classes. Looks a lot nicer.

== Changes in 0.0.7 ==

Most of these changes were made to open up the library to be used in the map editor with Albow.

SVN rev 143:
  * Change: Surface class renamed to View. Should have done this sooner.
  * Change: Screen constructor takes an additional argument, surface, that is used as the display. This change supports scenarios that have already initialized the display.
  * Changes: attribute View.super_rect renamed to View.parent_rect. Engine and examples modified for compatibility.
  * Change: Camera now takes a View argument instead of a pygame.surface.Surface. This has bugged me whenever a camera use subsurfaces.
  * Change: Engine constructor takes new args: screen_surface, camera_view, and camera_view_rect to support different scenarios such as multiple Engines in a game, programs that pre-initialize the display, programs that want the camera to start with a specific view.
  * Changes: examples cleaned up and made compatible with the Engine constructor and View class changes.
  * Fix: toolkit.make_tiles() and toolkit.make_tiles2() created a map.Level with no grid lines. This caused some examples to blow up when grid lines where enabled.
  * Changes: numerous documentation updates.
  * Removed: graphics module removed. After so long it simply remained as clutter.

== Changes in 0.0.8 ==

This release contains a small number of rather significant fixes.

SVN rev 148:
  * Fixed: View.__init__ did not create subsurfaces when rect was passed.
  * Fixed: Camera.view=view did not set the _surface attribute.

SVN rev 152:
  * Fixed: bad expression grouping in distance() produced wrong answer.

SVN rev 154:
  * Fixed: Er... I guess I broke the worst-case idiot light while playing around in 12_quad_tree_stress_test.py. It's working again.

== Changes in 0.0.9 ==

This release contains a sneak peek at the world editor.

SVN rev 156:
  * Fixed: clash in PolyGeometry.__init__ between list comprehension and outer variables x and y, resulting in errors.

SVN rev 157:
  * Fixed: PolyGeometry.__init__ calculated a containing rect where width and height were one pixel smaller than they should have been.
  * New: map_editor.py renamed to world_editor.py.
  * New: gamelib/pgu/gui added to SVN repo.
  * Changed: paths.py includes gamelib/pgu/gui.
  * New: world_editor.py features:
    * PGU menus; the easy stuff works, grid, labels, hud, quit; the rest are stubs for now
    * Scroll bars for map
    * Buttons for selecting shape to create
    * Right-click places a shape
    * Left-click selects a shape and activates control points
    * Left-click on control points move and reshape
    * Left-click on stacked shapes selects next shape
  * New: docs/ added to SVN.
  * New: third-party licenses added to distro.

SVN rev 159:
  * Changed: rearranged documentation directories.
  * Deleted: Ontario.jpg, Ontario.png.

SVN rev 162:
  * Fixed: Some shape classes' draw() method in world_editor.py did not convert their coordinates to screen space, which caused them to not scroll properly.

=== Changes in 0.0.10 ===

SVN rev 165:
  * New: Plugins in data/plugins, starting with quadtree exporter and importer.
  * New: Warning-danger files in plugins directories.
  * Changed: Added 'plugins' data lookup in gamelib/data.py.
  * Changes: Many in world_editor.py: menu reorg; new and open map; new, open, and save world entities; "nicer" event loop; fixed scrollbar problem.

SVN rev 170:
  * New: Special case added to Camera.interpolate. When State.clock.ticks_per_second == State.clock.max_fps interpolation is disabled. Effectively, interpolate() returns 1.0 and there are no interpolated frames. This condition was causing video frames to be misplaced when frame rate gets too low and a scroll step is significantly large. (This probably should be worked into GameClock as a self-tuning behavior.)
  * Changes: Numerous in world_editor.py. A less busy run loop; some tweaks to solve scrolling video glitches; tweaks to opening maps and entities.

SVN rev 172:
  * Experimental: GameClock's use_wait calculation changed. Need to validate it on a slow machine.
  * Changes: Many additions to world_editor.py: confirmation dialogs, file dialogs, alert dialogs tightened.
  * Fixed: Think the "nice" event loop is finally working the way I want it.

SVN rev 174:
  * Changed: Added themes to gamelib.data.path.
  * Fixed: pgu.gui.textarea.TextArea.doLines() no longer blows up when value is ''.
  * Fixed: pgu.gui.textarea.TextArea.setCursorByHVPos() now positions cursor at end of text rather than end-1.
  * Changed: Exposed View.`_`eraser as View.eraser.
  * New: world_editor.py has a new shape-info panel for viewing and editing shape user_data.

SVN rev 176:
  * Fixed: gui.TextArea.resize() miscalculated, causing gui.Table.`_`Table_td.resize() to grow the textfield each time. Removing gui.TextArea.resize() fixed this--possibly with style side-effects, but nothing obvious! gui.Input uses the superclass's resize(), so assuming this should also be fine for TextArea. Gah... this was hard to debug. :)
  * Fixed: In world_editor.py, DELETE key no longer removes a shape from the map when the TextArea widget has focus.

SVN rev 178:
  * Changed: map importer and exporter now use URL quote/unquote to handle multi-line user_data.
  * Changed: removed extraneous debug prints from textarea.py.
  * Fixed: action_entities_save() was not resetting the "changed" state after a save.

SVN rev 182:
  * Fixed: GameClock.tick() sometimes computes a negative wait_ms, which causes time.sleep() to raise IOError. This is now detected and the call to time.sleep() is skipped.
  * Changes: world_editor.py: minimum window size fixed at 800x600 (to prevent GUI exceptions); some menus and actions renamed; doc and text viewers for displaying import/expect exceptions, help text, etc.; mouse behavior modified to support ScrollArea. A few bug fixes.

=== Changes in 0.0.11 ===

SVN rev 185:
  * Fixed: QuadTreeNode.`_`add_internal() skipped some collision tests when keeping an entity.
  * Fixed: QuadTreeNode.test_collisions() did not short circuit if its rect did not intersect the argument entity.
  * Fixed: In GameClock.reset() increased `_`reset_threshold to 1.5 to reduce calls to reset(); changed some constants to float so Python does not have convert them.
  * Fixed: World editor allowed interaction with user_data field when no shape was selected.
  * Fixed: export_world_quadtree.py now raises pygame.error instead of printing to stdout when encountering an unsupported shape type.
  * Changed: In 12_quad_tree_stress_test.py and 15_quad_tree_geometry_test.py changed HUD FPS interval to 200 for more frequent updates.

SVN rev 188:
  * Fixed: Tiled maps do not insure every tile position has a tile. Such "sparse" maps caused toolkit.load_tiled_tmx_map() to blow up. This is now fixed.
  * Changed: MapLayer constructor takes a name argument which is stored in the MapLayer.name. It is reserved for programmer convenience. It is not needed by the library.
  * Changed: toolkit.collapse_map_layer() preserves MapLayer.name.
  * Changed: Added intelligence to toolkit.collapse_map_layer() to use a default colorkey if the full number of tiles aren't present in the map (happens in sparse maps). When this occurred, the resulting squares would be black an opaque, covering up lower layers.
  * New: toolkit.reduce_map_layers() reduces the specified layers to one layer.
  * New: 16_reduce_map.py to demo the new toolkit.reduce_map_layers().

SVN rev 191:
  * Changes: world_editor.py; Map menu became Images menu; added menu item to load tiles; added action_tiles_load(); added scrollable table to hold image palette.
  * Fixed: world_editor.py; action_browse_file() had hard-coded title and path, ignoring its arguments.

SVN rev 194:
  * Changed: pygame_utils.load_image() raise SystemExit if it failed. Now raises pygame.error.
  * Checkpoint: Working on world_editor.py's tile sheet loader and sizer. The loader is halfway implemented: loads a tile sheet into the sizer. The sizer is just an unconnected GUI at present.

SVN rev 196:
  * New: world_editor.py tilesets: Load, size, display in palette.

SVN rev 198:
  * New: world_editor.py; tile palette integrated into the tool group. Mouse pointer picks up tile image.

SVN rev 200:
  * Changes: all paths.py files modified to use sys.path.insert() instead of sys.path.append(). This should avoid breakages on systems that have pgu installed as a Python site package.

SVN rev 203:
  * Changed: Tile palette taken out of tool group. This frees one to insert shapes with/without tiles attached.
  * New: Tile features: loader/sizer form; selecting one or more tiles from palette with left- and right-click ergonomics; selected tiles attach to mouse pointer for placement; selected tiles attach to world shapes; stamp, move, delete in map.
  * New: Geometry classes auto-extend their points to the edge of the selected tiles' bounding rect.

SVN rev 206:
  * New: world_editor.py; Autosave/load tilesheet meta data so it doesn't have to be input every time a tilesheet is loaded. Meta data saved in the same directory as the source image file, named "basename.tilesheet". The format is one line, space-delimited ASCII: marginx marginy tilewidth tileheight spacingx spacingy.

SVN rev 208:
  * Fixed: world_editor.py; auto-sizing polygons using vectors from coordinates was not working well. A functional method based on the bounding rect is now used instead, which gives more reliable results.